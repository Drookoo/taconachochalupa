[ INFO ] Checking new version of iRedMail ...
 + < DEBUG > Creating necessary directories ...
[ INFO ] Installing package(s): apt-transport-https
[ INFO ] Installing package(s): dirmngr
[ INFO ] apt-get update ...
< SKIP > Function: check_new_iredmail.
 + < DEBUG > Creating necessary directories ...
[ INFO ] apt-get update ...
< SKIP > Function: check_new_iredmail.
 + < DEBUG > Creating necessary directories ...
[ INFO ] apt-get update ...
< SKIP > Function: check_new_iredmail.
 + < DEBUG > Creating necessary directories ...
[ INFO ] apt-get update ...
[ INFO ] Fetching source tarballs ...
[ INFO ] + 1 of 5: https://dl.iredmail.org/yum/misc/iRedAdmin-0.9.1.tar.bz2
[ INFO ] + 2 of 5: https://dl.iredmail.org/yum/misc/mlmmjadmin-1.1.tar.bz2
[ INFO ] + 3 of 5: https://dl.iredmail.org/yum/misc/iRedAPD-2.2.tar.bz2
[ INFO ] + 4 of 5: https://dl.iredmail.org/yum/misc/netdata-1.10.0.gz.run
[ INFO ] + 5 of 5: https://dl.iredmail.org/yum/misc/roundcubemail-1.3.6-complete.tar.gz
[ INFO ] Validate downloaded source tarballs ...
[ INFO ] Install package: dialog
[ INFO ] Installing package(s): dialog
[ INFO ] Checking configuration file: /root/ku/iRedMail-0.9.8/config ...
[ INFO ] NOT FOUND. Launching installation wizard.
[ INFO ] Add apt repo for SOGo: https://packages.inverse.ca
[ INFO ] Import apt key (0x810273C4) for SOGo repo (https://packages.inverse.ca).
[ INFO ] Resynchronizing the package index files (apt-get update) ...
[ INFO ] Installing package(s): postfix postfix-pcre libsasl2-modules mariadb-client mariadb-server postfix-mysql libdbd-mysql-perl php-cli php-fpm php-json php-gd php-curl mcrypt php-intl php-xml php-mbstring php-mcrypt php-mysql nginx-full dovecot-imapd dovecot-pop3d dovecot-lmtpd dovecot-managesieved dovecot-sieve dovecot-mysql amavisd-new libcrypt-openssl-rsa-perl libmail-dkim-perl clamav-freshclam clamav-daemon spamassassin altermime arj nomarch cpio lzop cabextract p7zip-full rpm ripole libmail-spf-perl unrar-free pax lrzip mlmmj sogo sogo-activesync sope4.9-gdl1-mysql python-sqlalchemy python-dnspython python-mysqldb python-jinja2 python-netifaces python-webpy python-beautifulsoup python-lxml python-pycurl python-requests uwsgi uwsgi-plugin-python fail2ban zlib1g libuuid1 libmnl0 curl lm-sensors netcat bzip2 acl patch cron tofrodos logwatch unzip bsdutils liblz4-tool
 + < DEBUG > Service control: enable rsyslog.
Synchronizing state of rsyslog.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable rsyslog
 + < DEBUG > Service control: enable postfix.
Synchronizing state of postfix.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable postfix
 + < DEBUG > Service control: enable mysql.
Synchronizing state of mysql.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable mysql
Failed to enable unit: Refusing to operate on linked unit file mysql.service
 + < DEBUG > Service control: enable nginx.
Synchronizing state of nginx.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable nginx
 + < DEBUG > Service control: enable php7.0-fpm.
Synchronizing state of php7.0-fpm.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable php7.0-fpm
 + < DEBUG > Service control: enable uwsgi.
uwsgi.service is not a native service, redirecting to systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable uwsgi
 + < DEBUG > Service control: enable dovecot.
Synchronizing state of dovecot.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable dovecot
 + < DEBUG > Service control: enable clamav-daemon.
Synchronizing state of clamav-daemon.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable clamav-daemon
 + < DEBUG > Service control: enable amavis.
amavis.service is not a native service, redirecting to systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable amavis
 + < DEBUG > Service control: enable clamav-freshclam.
Synchronizing state of clamav-freshclam.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable clamav-freshclam
 + < DEBUG > Service control: enable uwsgi.
uwsgi.service is not a native service, redirecting to systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable uwsgi
 + < DEBUG > Service control: enable sogo.
sogo.service is not a native service, redirecting to systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable sogo
 + < DEBUG > Service control: enable memcached.
Synchronizing state of memcached.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable memcached
 + < DEBUG > Service control: enable fail2ban.
Synchronizing state of fail2ban.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable fail2ban
 + < DEBUG > Service control: enable cron.
Synchronizing state of cron.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable cron
 + < DEBUG > Service control: disable spamassassin.
Synchronizing state of spamassassin.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install disable spamassassin
[ INFO ] Generate self-signed SSL cert (2048 bits, expire in 10 years).
[ INFO ] Generate Diffie Hellman Group with openssl, please wait.
[ INFO ] Create required system accounts.
 + < DEBUG > Create system account: vmail:vmail (2000:2000).
 + < DEBUG > Create directory used to store global sieve filters: /var/vmail/sieve.
 + < DEBUG > Create system account: mlmmj:mlmmj (2003:2003).
 + < DEBUG > Create system account: iredadmin:iredadmin (2001:2001).
 + < DEBUG > Create system account: iredapd:iredapd (2002:2002).
 + < DEBUG > Create system account: netdata:netdata (2004:2004).
 + < DEBUG > Configure uwsgi.
[ INFO ] Configure Nginx web server.
ln: failed to create symbolic link '/etc/nginx/conf-enabled/\': File exists
ln: failed to create symbolic link '/etc/nginx/conf-enabled/\': File exists
ln: failed to create symbolic link '/etc/nginx/conf-enabled/\': File exists
ln: failed to create symbolic link '/etc/nginx/conf-enabled/\': File exists
ln: failed to create symbolic link '/etc/nginx/conf-enabled/\': File exists
ln: failed to create symbolic link '/etc/nginx/conf-enabled/\': File exists
ln: failed to create symbolic link '/etc/nginx/conf-enabled/\': File exists
[ INFO ] Configure PHP.
 + < DEBUG > Hide PHP info from remote users requests: /etc/php/7.0/fpm/php.ini.
 + < DEBUG > Increase 'memory_limit' to 256M: /etc/php/7.0/fpm/php.ini.
 + < DEBUG > Increase 'upload_max_filesize', 'post_max_size' to 10/12M: /etc/php/7.0/fpm/php.ini.
 + < DEBUG > Disable php extension: suhosin. /etc/php/7.0/fpm/php.ini.
[ INFO ] Configure MariaDB database server.
 + < DEBUG > Initialize MySQL server.
 + < DEBUG > Stop MySQL service before initializing database or updating my.cnf.
 + < DEBUG > Service control: stop mysql.
 + < DEBUG > Disable 'skip-networking' in my.cnf.
 + < DEBUG > Set max_connections to 1024.
 + < DEBUG > Enable 'innodb_file_per_table' in my.cnf.
 + < DEBUG > Restart service: mysql.
 + < DEBUG > Service control: restart mysql.
 + < DEBUG > Sleep 10 seconds for MySQL daemon initialization ...
Database
information_schema
mysql
performance_schema
 + < DEBUG > Setting password for MySQL root user: root.
Password	char(41)	NO			
 + < DEBUG > Generate defauts file for MySQL client option --defaults-file: /root/.my.cnf.
 + < DEBUG > Delete anonymous database user.
 + < DEBUG > Delete root access with empty passwords.
 + < DEBUG > Delete root access with empty passwords.
 + < DEBUG > Generate sample SQL templates.
 + < DEBUG > Create database: vmail.
 + < DEBUG > Initialize database: vmail.
 + < DEBUG > Add first domain and postmaster@ user.
[ INFO ] Setup daily cron job to backup SQL databases with /var/vmail/backup/backup_mysql.sh
[ INFO ] Configure Postfix (MTA).
 + < DEBUG > Enable chroot.
 + < DEBUG > Enable submission and additional transports required by Amavisd and Dovecot.
 + < DEBUG > Copy: /etc/{hosts,resolv.conf,localtime,services} -> /var/spool/postfix/etc/
 + < DEBUG > Disable duplicate log entries (mail.{info,warn,err}) in syslog config file.
 + < DEBUG > Configure Postfix for SQL/LDAP lookup.
 + < DEBUG > Enable postscreen service.
 + < DEBUG > Comment out 'smtp inet ... smtpd' service in /etc/postfix/master.cf.
 + < DEBUG > Uncomment the new 'smtpd pass ... smtpd' service in /etc/postfix/master.cf.
 + < DEBUG > Uncomment the new smtp inet ... postscreen service in /etc/postfix/master.cf.
 + < DEBUG > Uncomment the new 'tlsproxy unix ... tlsproxy' service in /etc/postfix/master.cf.
 + < DEBUG > Uncomment the new 'dnsblog unix ... dnsblog' service in /etc/postfix/master.cf.
 + < DEBUG > Update /etc/postfix/main.cf to enable postscreen.
 + < DEBUG > Create /var/spool/postfix//var/lib/postfix/postscreen_cache.db.
[ INFO ] Configure Dovecot (POP3/IMAP/Managesieve/LMTP/LDA).
 + < DEBUG > Copy sample Dovecot config file: /root/ku/iRedMail-0.9.8/samples/dovecot/dovecot22.conf -> /etc/dovecot/dovecot.conf
 + < DEBUG > Configure dovecot: /etc/dovecot/dovecot.conf.
 + < DEBUG > Copy global sieve filter rule file: /var/vmail/sieve/dovecot.sieve.
 + < DEBUG > Enable dovecot SASL support in postfix: /etc/postfix/main.cf.
 + < DEBUG > Create directory for Dovecot plugin: Expire.
 + < DEBUG > Configure Dovecot logging.
 + < DEBUG > Create dovecot log file: /var/log/dovecot/dovecot.log.
 + < DEBUG > Create dovecot log file: /var/log/dovecot/lda.log.
 + < DEBUG > Create dovecot log file: /var/log/dovecot/imap.log.
 + < DEBUG > Create dovecot log file: /var/log/dovecot/pop3.log.
 + < DEBUG > Create dovecot log file: /var/log/dovecot/sieve.log.
 + < DEBUG > Setting logrotate for dovecot log file.
[ INFO ] Configure mlmmj (mailing list manager).
 + < DEBUG > Generate script: /usr/bin/mlmmj-amime-receive.
 + < DEBUG > Create required directories: /var/vmail/mlmmj, /var/vmail/mlmmj-archive.
 + < DEBUG > Setting cron job for mlmmj maintenance.
 + < DEBUG > Enable mlmmj transport in postfix: /etc/postfix/main.cf.
 + < DEBUG > Configure mlmmjadmin (RESTful API server used to manage mlmmj).
 + < DEBUG > Extracting: mlmmjadmin-1.1.tar.bz2 -> /opt
 + < DEBUG > Setting logrotate for mlmmjadmin log file.
 + < DEBUG > Generate modular syslog config file for mlmmjadmin.
 + < DEBUG > Make mlmmjadmin starting after system startup.
 + < DEBUG > Service control: enable mlmmjadmin.
Created symlink /etc/systemd/system/multi-user.target.wants/mlmmjadmin.service -> /lib/systemd/system/mlmmjadmin.service.
[ INFO ] Configure ClamAV (anti-virus toolkit).
 + < DEBUG > Configure ClamAV: /etc/clamav/clamd.conf.
 + < DEBUG > Configure freshclam: /etc/clamav/freshclam.conf.
[ INFO ] Configure Amavisd-new (interface between MTA and content checkers).
 + < DEBUG > Generate DKIM pem files: /var/lib/dkim/ccdc.local.pem.
Adding user clamav to group amavis
 + < DEBUG > Setting cron job for vmail user to delete virus mail per month.
 + < DEBUG > Import Amavisd database and privileges.
[ INFO ] Configure SpamAssassin (content-based spam filter).
 + < DEBUG > Copy sample SpamAssassin config file: /root/ku/iRedMail-0.9.8/samples/spamassassin/local.cf -> /etc/mail/spamassassin/local.cf.
 + < DEBUG > Enable crontabs for SpamAssassin update.
[ INFO ] Configure iRedAPD (postfix policy daemon).
 + < DEBUG > Extracting: iRedAPD-2.2.tar.bz2 -> /opt
 + < DEBUG > Configure iRedAPD.
 + < DEBUG > Create symbol link: /opt/iredapd/rc_scripts/iredapd.service -> /lib/systemd/system/iredapd.service.
 + < DEBUG > Make iredapd starting after system startup.
 + < DEBUG > Service control: enable iredapd.
Created symlink /etc/systemd/system/multi-user.target.wants/iredapd.service -> /opt/iredapd/rc_scripts/iredapd.service.
Created symlink /etc/systemd/system/iredapd.service -> /opt/iredapd/rc_scripts/iredapd.service.
 + < DEBUG > Import iRedAPD database template.
[ INFO ] Configure iRedAdmin (official web-based admin panel).
 + < DEBUG > Extracting: iRedAdmin-0.9.1.tar.bz2 -> /opt/www
 + < DEBUG > Set correct permission for iRedAdmin: /opt/www/iRedAdmin-0.9.1.
 + < DEBUG > Import iRedAdmin database template.
 + < DEBUG > Configure iRedAdmin.
 + < DEBUG > Configure general settings.
 + < DEBUG > Configure iredadmin database related settings.
 + < DEBUG > Configure SQL mail accounts related settings.
 + < DEBUG > Configure Amavisd related settings.
 + < DEBUG > Configure iRedAPD related settings.
[ INFO ] Configure Fail2ban (authentication failure monitor).
 + < DEBUG > Log into syslog instead of log file.
 + < DEBUG > Disable all default filters in /etc/fail2ban/jail.conf.
 + < DEBUG > Create Fail2ban config file: /etc/fail2ban/jail.local.
 + < DEBUG > Create Fail2ban directory: /etc/fail2ban/jail.d.
 + < DEBUG > Copy modular Fail2ban jail config files to /etc/fail2ban/jail.d.
 + < DEBUG > Copy sample Fail2ban filter config files.
[ INFO ] Configure Roundcube webmail.
 + < DEBUG > Extracting: roundcubemail-1.3.6-complete.tar.gz -> /opt/www
 + < DEBUG > Set correct permission for Roundcubemail: /opt/www/roundcubemail-1.3.6.
 + < DEBUG > Import SQL database and privileges for Roundcubemail.
 + < DEBUG > Configure database for Roundcubemail: /opt/www/roundcubemail-1.3.6/config/*.
 + < DEBUG > Setup daily cron job to keep SQL database clean.
 + < DEBUG > Config plugin: managesieve.
 + < DEBUG > Config plugin: password.
 + < DEBUG > Config plugin: enigma.
[ INFO ] Configure SOGo Groupware (Webmail, Calendar, Address Book, ActiveSync).
 + < DEBUG > Initialize SOGo database.
 + < DEBUG > Service control: restart sogo.
 + < DEBUG > Install netdata with package: netdata-1.10.0.gz.run.
 + < DEBUG > Service control: enable netdata.
 + < DEBUG > Generate netdata config file: /root/ku/iRedMail-0.9.8/samples/netdata/netdata.conf -> /opt/netdata/etc/netdata/netdata.conf.
 + < DEBUG > Generate htpasswd file: /etc/nginx/netdata.users.
 + < DEBUG > Create MySQL user netdata with minimal privilege: USAGE.
 + < DEBUG > Generate /opt/netdata/etc/netdata/python.d/mysql.conf.
 + < DEBUG > Add sysctl parameters for better netdata performance.
 + < DEBUG > Increase open files limit.
 + < DEBUG > Mail sensitive administration info to postmaster@ccdc.local.
 + < DEBUG > Set file permission to 0600: /var/spool/cron/crontabs/root.
 + < DEBUG > Set file permission to 0600: /var/spool/cron/crontabs/amavis.
 + < DEBUG > Set file permission to 0600: /var/spool/cron/crontabs/sogo.
[ INFO ] Copy firewall sample rules: /etc/default/iptables.
 + < DEBUG > Service control: enable iptables.
iptables.service is not a native service, redirecting to systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable iptables
[ INFO ] Restarting firewall ...
 + < DEBUG > Service control: restart iptables.
[ INFO ] Updating ClamAV database (freshclam), please wait ...
 + < DEBUG > Send info of chosed packages to iRedMail team to help improve iRedMail:
 + < DEBUG > 
 + < DEBUG > 	MARIADB=YES
 + < DEBUG > 	WEB_SERVER=NGINX
 + < DEBUG > 	ROUNDCUBE=YES
 + < DEBUG > 	SOGO=YES
 + < DEBUG > 	NETDATA=YES
 + < DEBUG > 	FAIL2BAN=YES
 + < DEBUG > 	IREDADMIN=YES
 + < DEBUG > 
